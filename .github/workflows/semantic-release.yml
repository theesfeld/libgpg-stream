name: Semantic Release

on:
  push:
    branches:
      - master

jobs:
  release:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.semantic.outputs.new_release_version }}
      released: ${{ steps.semantic.outputs.new_release_published }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GH_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: |
          npm install --save-dev semantic-release \
            @semantic-release/exec \
            @semantic-release/github \
            @semantic-release/commit-analyzer \
            @semantic-release/release-notes-generator

      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libgpgme-dev autopoint libtool automake

      - name: Run semantic-release
        id: semantic
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          AUR_REPO_TOKEN: ${{ secrets.AUR_REPO_TOKEN }}
        run: |
          npx semantic-release > semantic-output.log 2>&1
          cat semantic-output.log
          
          # Extract version and release status from semantic-release output
          if grep -q "Published release" semantic-output.log; then
            echo "new_release_published=true" >> $GITHUB_OUTPUT
            VERSION=$(grep "Published release" semantic-output.log | grep -o '[0-9]\+\.[0-9]\+\.[0-9]\+' | head -1)
            echo "new_release_version=$VERSION" >> $GITHUB_OUTPUT
            echo "Released version: $VERSION"
          else
            echo "new_release_published=false" >> $GITHUB_OUTPUT
            echo "No release published"
          fi

  build-binaries:
    needs: release
    if: needs.release.outputs.released == 'true'
    strategy:
      matrix:
        arch: [x86_64, aarch64, armv7]
        include:
          - arch: x86_64
            platform: linux/amd64
          - arch: aarch64
            platform: linux/arm64
          - arch: armv7
            platform: linux/arm/v7
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build for ${{ matrix.arch }}
        run: |
          # Build using Docker with proper LFS support
          docker buildx build \
            --platform ${{ matrix.platform }} \
            --output type=local,dest=. \
            --target export \
            -f- . << 'EOF'
          FROM --platform=${{ matrix.platform }} ubuntu:22.04 AS build
          
          # Install dependencies
          RUN apt-get update && apt-get install -y \
              build-essential \
              libgpgme-dev \
              autopoint \
              libtool \
              automake \
              pkg-config
          
          # Set up build environment with LFS support
          ENV CPPFLAGS="-D_FILE_OFFSET_BITS=64"
          ENV CFLAGS="-D_FILE_OFFSET_BITS=64"
          
          WORKDIR /src
          COPY . .
          
          # Configure with LFS support explicitly
          RUN ./autogen.sh && \
              ./configure --prefix=/usr \
                         --enable-largefile \
                         CPPFLAGS="-D_FILE_OFFSET_BITS=64" \
                         CFLAGS="-D_FILE_OFFSET_BITS=64 -Wall -Wextra -std=c99 -O2" && \
              make && \
              make DESTDIR=/tmp/install install
          
          FROM scratch AS export
          COPY --from=build /tmp/install /
          EOF
          
          # Create tarball from exported files
          tar -czf libgpg-stream-${{ needs.release.outputs.version }}-linux-${{ matrix.arch }}.tar.gz \
              -C . usr/

      - name: Upload binary artifact
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          gh release upload v${{ needs.release.outputs.version }} \
            libgpg-stream-${{ needs.release.outputs.version }}-linux-${{ matrix.arch }}.tar.gz
